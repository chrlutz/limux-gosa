{
  "ca-keyfile": "ca.key",
  "keyfile1": "1.key",
  "keyfile2": "2.key",
  "signedbywrongcakeyfile": "signedbywrongca.key",

  "ca-certfile": "ca.cert",
  "certfile1": "1.cert",
  "certfile2": "2.cert",
  "signedbywrongcafile": "signedbywrongca.cert",
  
  "ca-generatedKey": "$secp256r1 keygen()",
  "generatedKey1": "$secp256r1 keygen()",
  "generatedKey2": "$secp256r1 keygen()",
  
  "_ca-savekey": "$ca-generatedKey encode(PEM) ca-keyfile write(if-missing)",
  "_savekey1": "$generatedKey1 encode(PEM) keyfile1 write(if-missing)",
  "_savekey2": "$generatedKey2 encode(PEM) keyfile2 write(if-missing)",
  "_savesbwckey": "$generatedKey2 encode(PEM) signedbywrongcakeyfile write(if-missing)",
  
  "ca-key": "$ca-keyfile key()",
  "key1": "$keyfile1 key()",
  "key2": "$keyfile2 key()",
  
  "sigAlg": { "algorithm": "$ecdsa-with-SHA256", "parameters": null },
  
  "issuer-id": {
    "rdnSequence": [
      [ { "type": "$id-at-commonName",       "value": "CA" } ]
    ]
  },
  
  ############# CA CERTIFICATE ############################
  "ca-certificate": {
    "pubkey":  "$ca-key",
    "signkey": "$ca-key",
    "certfile": "$ca-certfile",
      
    "certificate": {
      "tbsCertificate": {
        "version": "v3",
        "serialNumber": 1,
        "signature": "$sigAlg",
        "issuer": "$issuer-id",
        "validity": {
          "notBefore": { "utcTime": "151101000000Z" },
          "notAfter":  { "utcTime": "251101000000Z" }
        },
        
        # self-signed => subject is same as issuer
        "subject": "$issuer",
        
        "subjectPublicKeyInfo": "$pubkey subjectPublicKeyInfo()",
        "extensions": [
          {
            "extnID": "$id-ce-basicConstraints",
            "critical": true,
            "extnValue": "$constraints BasicConstraints encode(DER)",
            "constraints": { "cA": true }
          },
          {
            "extnID": "$id-ce-keyUsage",
            "critical": true,
            "extnValue": "$'keyCertSign, cRLSign' KeyUsage encode(DER)"
          }
        ]
      },
      "signatureAlgorithm": "$sigAlg",
      "signature": "$tbsCertificate TBSCertificate encode(DER) signkey sigAlg sign()"
    },
    "output": "$certificate Certificate encode(PEM) certfile write(if-missing)"
  },
  
  ############# CERTIFICATE 1 ############################
  "certificate1": {
    "pubkey":  "$key1",
    "signkey": "$ca-key",
    "certfile": "$certfile1",
      
    "certificate": {
      "tbsCertificate": {
        "version": "v3",
        
        "serialNumber": 2,
        
        "signature": "$sigAlg",
        "issuer": "$issuer-id",
        "validity": {
          "notBefore": { "utcTime": "151101000000Z" },
          "notAfter":  { "utcTime": "251101000000Z" }
        },
        
        "subject": {
          "rdnSequence": [
            [ { "type": "$id-at-commonName",       "value": "Cert1" } ]
          ]
        },
            
        "subjectPublicKeyInfo": "$pubkey subjectPublicKeyInfo()",
        "extensions": [
          {
            "extnID": "$id-ce-subjectAltName",
            "critical": false,
            "extnValue": "$san SubjectAltName encode(DER)",
            "san": [ { "iPAddress": "$0.0.0.0" } ]
          },
          {
            "extnID":"$id-ce-keyUsage",
            "extnValue":"$'digitalSignature' KeyUsage encode(DER)"
          },
          {
            "extnID": "$id-ce-extKeyUsage",
            "critical": false,
            "extnValue": "$extkeyusage ExtKeyUsageSyntax encode(DER)",
            "extkeyusage": [ "$id-kp-serverAuth", "$id-kp-clientAuth" ]
          },
          {
            "extnID": "$gosa-ce-accessControl",
            "critical": false,
            "extnValue": "$acl GosaAccessControl encode(DER)",
            "acl": { 
              "query": "queryAll",
              "jobs":  "jobsAll"
            }
          }
        ]
      },
      "signatureAlgorithm": "$sigAlg",
      "signature": "$tbsCertificate TBSCertificate encode(DER) signkey sigAlg sign()"
    },
    "output": "$certificate Certificate encode(PEM) certfile write(if-missing)"
  },
  
  ############# CERTIFICATE 2 ############################
  "certificate2": {
    "pubkey":  "$key2",
    "signkey": "$ca-key",
    "certfile": "$certfile2",
      
    "certificate": {
      "tbsCertificate": {
        "version": "v3",
        
        "serialNumber": 3,
        
        "signature": "$sigAlg",
        "issuer": "$issuer-id",
        "validity": {
          "notBefore": { "utcTime": "151101000000Z" },
          "notAfter":  { "utcTime": "251101000000Z" }
        },
        
        "subject": {
          "rdnSequence": [
            [ { "type": "$id-at-commonName",       "value": "Cert2" } ]
          ]
        },
            
        "subjectPublicKeyInfo": "$pubkey subjectPublicKeyInfo()",
        "extensions": [
          {
            "extnID": "$id-ce-subjectAltName",
            "critical": false,
            "extnValue": "$san SubjectAltName encode(DER)",
            "san": [ { "iPAddress": "$0.0.0.0" } ]
          },
          {
            "extnID":"$id-ce-keyUsage",
            "extnValue":"$'digitalSignature' KeyUsage encode(DER)"
          },
          {
            "extnID": "$id-ce-extKeyUsage",
            "critical": false,
            "extnValue": "$extkeyusage ExtKeyUsageSyntax encode(DER)",
            "extkeyusage": [ "$id-kp-serverAuth", "$id-kp-clientAuth" ]
          },
          {
            "extnID": "$gosa-ce-accessControl",
            "critical": false,
            "extnValue": "$acl GosaAccessControl encode(DER)",
            "acl": { 
              "query": "queryAll",
              "jobs":  "jobsAll"
            }
          }
        ]
      },
      "signatureAlgorithm": "$sigAlg",
      "signature": "$tbsCertificate TBSCertificate encode(DER) signkey sigAlg sign()"
    },
    "output": "$certificate Certificate encode(PEM) certfile write(if-missing)"
  },
  
  ############# CERTIFICATE SIGNED BY WRONG CA ############################
  "certificate_wrong_ca": {
    "pubkey":  "$key2",
    "signkey": "$key2",
    "certfile": "$signedbywrongcafile",
      
    "certificate": {
      "tbsCertificate": {
        "version": "v3",
        
        "serialNumber": 3,
        
        "signature": "$sigAlg",
        "issuer": "$issuer-id",
        "validity": {
          "notBefore": { "utcTime": "151101000000Z" },
          "notAfter":  { "utcTime": "251101000000Z" }
        },
        
        "subject": {
          "rdnSequence": [
            [ { "type": "$id-at-commonName",       "value": "WrongCACert" } ]
          ]
        },
            
        "subjectPublicKeyInfo": "$pubkey subjectPublicKeyInfo()",
        "extensions": [
          {
            "extnID": "$id-ce-subjectAltName",
            "critical": false,
            "extnValue": "$san SubjectAltName encode(DER)",
            "san": [ { "iPAddress": "$0.0.0.0" } ]
          },
          {
            "extnID":"$id-ce-keyUsage",
            "extnValue":"$'digitalSignature' KeyUsage encode(DER)"
          },
          {
            "extnID": "$id-ce-extKeyUsage",
            "critical": false,
            "extnValue": "$extkeyusage ExtKeyUsageSyntax encode(DER)",
            "extkeyusage": [ "$id-kp-serverAuth", "$id-kp-clientAuth" ]
          },
          {
            "extnID": "$gosa-ce-accessControl",
            "critical": false,
            "extnValue": "$acl GosaAccessControl encode(DER)",
            "acl": { 
              "query": "queryAll",
              "jobs":  "jobsAll"
            }
          }
        ]
      },
      "signatureAlgorithm": "$sigAlg",
      "signature": "$tbsCertificate TBSCertificate encode(DER) signkey sigAlg sign()"
    },
    "output": "$certificate Certificate encode(PEM) certfile write(if-missing)"
  }
}
